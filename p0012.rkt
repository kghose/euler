#|
Highly divisible triangular number
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

The simple strategy is to go through each triangle number in turn (can use n(n+1)/2 or simply keep
adding. Then find all divisors upto sqrt of number, multiply by two and add two
|#
#lang racket

; How many divisors does k have?
; k is number
; n is current divisor (start with 1 or 2)
; max-n set to sqrt(n) for efficiency
; count (start with 0 or 1)
(define (divisor-count k n max-n count)
  (if (> n max-n)
      count
      (divisor-count k (+ n 1) max-n (if (= 0 (remainder k n)) (+ count 1) count))))

; kth triangle number 
(define (tn-k k) (/ (* k (+ k 1)) 2))
  
; Find first triangle number with more than 500 divisors. Start with k-th triangle number
; Set k as high as you dare
(define (triangle-number-500 k)
  (if (> (divisor-count (tn-k k) 2 (sqrt (tn-k k)) 1) 250)
      (tn-k k)
      (triangle-number-500 (+ k 1))))

(time (let ([k (triangle-number-500 10000)]) k)) ; -> cpu time: 568 real time: 583 gc time: 0